package Device;

import java.util.Random;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Andr√©
 */
public class DeviceGUI extends javax.swing.JFrame {

    /**
     * Creates new form DeviceGUI
     */
    StoreState myThread = null;
    int serialNumber;
    int state;
    int error;
    int energyProduction;

    public DeviceGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonChangeState = new javax.swing.JButton();
        jTextFieldSerialNumber = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldState = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldError = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldEnergyProduction = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(400, 300));
        getContentPane().setLayout(null);

        jButtonChangeState.setText("Change Device State");
        jButtonChangeState.setAutoscrolls(true);
        jButtonChangeState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChangeStateActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonChangeState);
        jButtonChangeState.setBounds(20, 200, 340, 50);

        jTextFieldSerialNumber.setText("12345");
        getContentPane().add(jTextFieldSerialNumber);
        jTextFieldSerialNumber.setBounds(280, 20, 82, 30);

        jLabel1.setText("Serial Number");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(24, 27, 170, 14);

        jLabel2.setText("State (0 - OFF, 1 - ON)");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(24, 65, 144, 14);

        jTextFieldState.setText("1");
        jTextFieldState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldStateActionPerformed(evt);
            }
        });
        getContentPane().add(jTextFieldState);
        jTextFieldState.setBounds(280, 60, 82, 30);

        jLabel3.setText("Error (0 - Ok, Other - Error)");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(24, 103, 170, 14);

        jTextFieldError.setText("0");
        jTextFieldError.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldErrorActionPerformed(evt);
            }
        });
        getContentPane().add(jTextFieldError);
        jTextFieldError.setBounds(280, 100, 82, 30);

        jLabel4.setText("Energy Production");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(24, 141, 180, 14);

        jLabel5.setText("(-1 -  Random, Positive - Value)");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(24, 164, 210, 14);

        jTextFieldEnergyProduction.setText("0");
        jTextFieldEnergyProduction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldEnergyProductionActionPerformed(evt);
            }
        });
        getContentPane().add(jTextFieldEnergyProduction);
        jTextFieldEnergyProduction.setBounds(280, 140, 82, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldStateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldStateActionPerformed

    private void jTextFieldErrorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldErrorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldErrorActionPerformed

    private void jTextFieldEnergyProductionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldEnergyProductionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldEnergyProductionActionPerformed

    private void jButtonChangeStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChangeStateActionPerformed
        this.updateValues();
        if (myThread == null) {
            myThread = new StoreState(this);
        }
    }//GEN-LAST:event_jButtonChangeStateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DeviceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DeviceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DeviceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DeviceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DeviceGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonChangeState;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField jTextFieldEnergyProduction;
    private javax.swing.JTextField jTextFieldError;
    private javax.swing.JTextField jTextFieldSerialNumber;
    private javax.swing.JTextField jTextFieldState;
    // End of variables declaration//GEN-END:variables

    int getDeviceSerialNumber() {
        return serialNumber;
    }

    int getDeviceState() {
        return state;
    }

    int getDeviceMyError() {
        return error;
    }

    int getDeviceEnergyProduction() {
        if (energyProduction != -1) {
            return energyProduction;
        } else {
            Random rand = new Random();
            return rand.nextInt(20);
        }
    }

    private void updateValues() {
        serialNumber = Integer.parseInt(this.jTextFieldSerialNumber.getText());
        state = (Integer.parseInt(this.jTextFieldState.getText()) == 1) ? 1 : 0;
        error = Integer.parseInt(this.jTextFieldError.getText());
        energyProduction = Integer.parseInt(this.jTextFieldEnergyProduction.getText());
    }
}
